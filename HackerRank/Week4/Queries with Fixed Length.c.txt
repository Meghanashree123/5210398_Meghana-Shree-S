#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

/*
 * Complete the 'solve' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY arr
 *  2. INTEGER_ARRAY queries
 */
int* solve(int arr_count, int* arr, int queries_count, int* queries, int* result_count) {
    int n = arr_count;

    int* left = (int*)malloc(n * sizeof(int));
    int* right = (int*)malloc(n * sizeof(int));
    int* stack = (int*)malloc(n * sizeof(int));
    int* best = (int*)malloc((n + 1) * sizeof(int));

    
    for (int i = 0; i <= n; i++) {
        best[i] = INT_MAX;
    }

    
    int t= -1;//t=top
    for (int i = 0; i < n; i++) {
        while (t >= 0 && arr[stack[t]] <= arr[i]) t--;
        left[i] = (t == -1) ? i + 1 : i - stack[t];
        stack[++t] = i;
    }

    
    t = -1;
    for (int i = n - 1; i >= 0; i--) {
        while (t >= 0 && arr[stack[t]] <= arr[i]) t--;
        right[i] = (t == -1) ? n - i : stack[t] - i;
        stack[++t] = i;
    }

 
    for (int i = 0; i < n; i++) {
        int window = left[i] + right[i] - 1;
        if (arr[i] < best[window]) {
            best[window] = arr[i];
        }
    }

    
    for (int i = n - 1; i >= 1; i--) {
        if (best[i] > best[i + 1]) {
            best[i] = best[i + 1];
        }
    }

    *result_count = queries_count;
    int* res = malloc(queries_count * sizeof(int));
    for (int i = 0; i < queries_count; i++) {
        int k=queries[i];
        res[i] = best[k];
    }

    free(left);
    free(right);
    free(stack);
    free(best);

    return res;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char** first_multiple_input = split_string(rtrim(readline()));
    int n = parse_int(*(first_multiple_input + 0));
    int q = parse_int(*(first_multiple_input + 1));

    char** arr_temp = split_string(rtrim(readline()));
    int* arr = malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        arr[i] = parse_int(*(arr_temp + i));
    }

    int* queries = malloc(q * sizeof(int));
    for (int i = 0; i < q; i++) {
        queries[i] = parse_int(ltrim(rtrim(readline())));
    }

    int result_count;
    int* result = solve(n, arr, q, queries, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d", result[i]);
        if (i != result_count - 1) fprintf(fptr, "\n");
    }
    fprintf(fptr, "\n");

    fclose(fptr);
    return 0;
}

/* Utility functions */
char* readline() {
    size_t alloc_length = 1024, data_length = 0;
    char* data = malloc(alloc_length);
    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;
        alloc_length <<= 1;
        data = realloc(data, alloc_length);
    }
    if (data[data_length - 1] == '\n') data[data_length - 1] = '\0';
    return data;
}

char* ltrim(char* str) {
    while (*str && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;
    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
