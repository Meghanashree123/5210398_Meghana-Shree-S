#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

/*
 * Complete the 'highestValuePalindrome' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts following parameters:
 *  1. STRING s
 *  2. INTEGER n
 *  3. INTEGER k
 */

char* highestValuePalindrome(char* s, int n, int k) {
    
    char* res = (char*)malloc((n + 1) * sizeof(char));
    memcpy(res, s, n);
    res[n] = '\0';

    
    unsigned char* changed = (unsigned char*)calloc(n, 1);

    
    int used = 0;
    for (int i = 0, j = n - 1; i < j; i++, j--) {
        if (res[i] != res[j]) {
            char mx = (res[i] > res[j]) ? res[i] : res[j];
            res[i] = res[j] = mx;
            changed[i] = 1;
            used++;
        }
    }

    
    if (used > k) {
        free(changed);
        free(res);
        char* no = (char*)malloc(3);
        no[0] = '-'; no[1] = '1'; no[2] = '\0';
        return no;
    }

    int remaining = k - used;

    
    for (int i = 0, j = n - 1; i < j; i++, j--) {
        if (res[i] == '9') continue;

        if (changed[i]) {
            
            if (remaining >= 1) {
                res[i] = res[j] = '9';
                remaining--;
            }
        } else {
            
            if (remaining >= 2) {
                res[i] = res[j] = '9';
                remaining -= 2;
            }
        }
    }

    if ((n % 2 == 1) && remaining > 0) {
        res[n / 2] = '9';
    }

    free(changed);
    return res;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char** first_multiple_input = split_string(rtrim(readline()));
    int n = parse_int(*(first_multiple_input + 0));
    int k = parse_int(*(first_multiple_input + 1));

    char* s = readline();
    char* result = highestValuePalindrome(s, n, k);

    fprintf(fptr, "%s\n", result);
    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) break;

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) return NULL;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);
        data[data_length] = '\0';
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) return NULL;
    while (*str && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return NULL;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
