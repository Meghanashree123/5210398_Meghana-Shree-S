#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAXN 100000   
#define MODHASH 262144  

int heap[MAXN + 5];
int heapsize = 0;

void swap(int *a, int *b) {
    int temp = *a; *a = *b; *b = temp;
}

void pushHeap(int val) {
    heap[++heapsize] = val;
    int i = heapsize;
    while (i > 1 && heap[i] < heap[i/2]) {
        swap(&heap[i], &heap[i/2]);
        i /= 2;
    }
}

void heapify(int i) {
    int smallest = i;
    int l = 2*i, r = 2*i+1;
    if (l <= heapsize && heap[l] < heap[smallest]) smallest = l;
    if (r <= heapsize && heap[r] < heap[smallest]) smallest = r;
    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        heapify(smallest);
    }
}

void popHeap() {
    if (heapsize == 0) return;
    heap[1] = heap[heapsize--];
    heapify(1);
}

int topHeap() {
    return heap[1];
}

typedef struct {
    long long key;
    int val;
    bool used;
} Entry;

Entry heaptable[MODHASH];

unsigned long long hashKey(long long x) {
    return (x * 11995408973635179863ULL) & (MODHASH-1);
}

void incDeleted(long long x) {
    unsigned long long h = hashKey(x);
    while (heaptable[h].used && heaptable[h].key != x) {
        h = (h+1) & (MODHASH-1);
    }
    if (!heaptable[h].used) {
        heaptable[h].used = true;
        heaptable[h].key = x;
        heaptable[h].val = 0;
    }
    heaptable[h].val++;
}

int getDeleted(long long x) {
    unsigned long long h = hashKey(x);
    while (heaptable[h].used) {
        if (heaptable[h].key == x) return heaptable[h].val;
        h = (h+1) & (MODHASH-1);
    }
    return 0;
}

void decDeleted(long long x) {
    unsigned long long h = hashKey(x);
    while (heaptable[h].used) {
        if (heaptable[h].key == x) {
            heaptable[h].val--;
            return;
        }
        h = (h+1) & (MODHASH-1);
    }
}


int main() {
    int Q;
    scanf("%d", &Q);

    while (Q--) {
        int type;
        scanf("%d", &type);

        if (type == 1) {
            int x; scanf("%d", &x);
            pushHeap(x);
        } else if (type == 2) {
            int x; scanf("%d", &x);
            incDeleted(x); // mark deleted
        } else if (type == 3) {
            // clean top while deleted
            while (heapsize > 0 && getDeleted(topHeap()) > 0) {
                decDeleted(topHeap());
                popHeap();
            }
            printf("%d\n", topHeap());
        }
    }
    return 0;
}
