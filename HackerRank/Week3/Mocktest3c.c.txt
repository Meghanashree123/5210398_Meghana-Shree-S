#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);

int parse_int(char*);

/*
 * Complete the 'bigSorting' function below.
 *
 * The function is expected to return a STRING_ARRAY.
 * The function accepts STRING_ARRAY unsorted as parameter.
 */

int compareNumbers(const void* a, const void* b) {
    char* num1 = *(char**)a;
    char* num2 = *(char**)b;

    int len1 = strlen(num1);
    int len2 = strlen(num2);

    if (len1 != len2) {
        return len1 - len2;   // shorter length â†’ smaller number
    }

    return strcmp(num1, num2);  // lexicographic compare if same length
}

char** bigSorting(int unsorted_count, char** unsorted, int* result_count) {
    qsort(unsorted, unsorted_count, sizeof(char*), compareNumbers);
    *result_count = unsorted_count;
    return unsorted;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int n = parse_int(ltrim(rtrim(readline())));

    char** unsorted = malloc(n * sizeof(char*));

    for (int i = 0; i < n; i++) {
        char* unsorted_item = readline();
        *(unsorted + i) = unsorted_item;
    }

    int result_count;
    char** result = bigSorting(n, unsorted, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%s", result[i]);

        if (i != result_count - 1) {
            fprintf(fptr, "\n");
        }
    }

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) break;

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);

        if (!data) return '\0';
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length + 1);

    return data;
}

char* ltrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    while (*str != '\0' && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

int parse_int(char* str) {
    return atoi(str);
}